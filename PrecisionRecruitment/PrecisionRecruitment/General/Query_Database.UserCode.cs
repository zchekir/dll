///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Data;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace PrecisionRecruitment.General
{
    public partial class Query_Database
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        /// <summary>
        /// Stores the current value found in the extract
        /// </summary>
        public string CurrentValue;

        
        public void PrintDatabaseResults()
        {
       
        	//Loop through each column and log the column name
			foreach (DataColumn col in engine.Helpers.SQLUtility.dt.Columns) {
				Report.Info(col.ColumnName);
			}
        	
        	//Loop through the items in the datatable and log in report
			foreach (DataRow row in engine.Helpers.SQLUtility.dt.Rows) {
				foreach (var item in row.ItemArray) {
					Report.Info(item.ToString());
				}
        	}
				
        }

        public void PrintKnownResults()
        {
        	//Loop through each column and log the column name
			foreach (DataColumn col in engine.Helpers.CSVUtility.dt.Columns) {
				Report.Info(col.ColumnName);
			}
        	
        	//Loop through the items in the datatable and log in report
			foreach (DataRow row in engine.Helpers.CSVUtility.dt.Rows) {
				foreach (var item in row.ItemArray) {
					Report.Info(item.ToString());
				}
        	}

        }
        
        /// <summary>
        /// This will search the stored datatable (after importing form file) for a value using specified options
        /// </summary>
        /// <param name="testCode">The test code to earch for i.e Detection</param>
        /// <param name="outcome">The outcome (column) to search for i.e Accuracy</param>
        /// <returns></returns>
        private string GetExtractValue(string testCode, string outcome)
        {
        	int rowIndex = 0;
        	int colIndex = 0;
        	bool colFound = false;
        	bool rowFound = false;
        	
        	//Loop over each column untill we find the 'Test' column containing each test included in the assessment
        	foreach (DataColumn col in engine.Helpers.CSVUtility.dt.Columns)
        	{
  				if (col.ColumnName == "Test")
  				{
  					//Loop over each row untill we find the row containing the Test Code we want results for
  					//Exit the loop once found and store the row index
  					foreach (DataRow row in engine.Helpers.CSVUtility.dt.Rows)
  					{
  						if (row[col].ToString() == testCode)
  							break;
  						else
  							rowIndex++;
  					}	
  				}
  				
  				//Check if the current column is for the Outcome we want. Increase column index if we are looking at a different column
  				//and we have not yet found the column we are looking for
  				if (col.ColumnName != outcome && colFound != true)
  					colIndex++;
  				else
  					colFound = true;
  				
  				//Exit the loop if we have found the correct row and column
  				if (colFound && rowFound)
  					break;
  				  				
        	}
        	
        	//Store result from search
      		if (colFound)
      			CurrentValue = engine.Helpers.CSVUtility.dt.Rows[rowIndex][colIndex].ToString();
      		else
      			CurrentValue = "Test Outcome not found in extract";
        	
			return CurrentValue;        	
        }
		
        /// <summary>
        /// Compares values in the database with values from the stored extract after importing the data into a datatable
        /// </summary>
        public void CompareResults()
        {
        	int colIndex = 0;
        	int rowIndex = 0;
           //Loop over each column from the processed data and search for specific outcomes        	
           foreach (DataColumn col in engine.Helpers.SQLUtility.dt.Columns)
           {
           		if (col.ColumnName == "Test")
           		{
           			foreach (DataRow row in engine.Helpers.SQLUtility.dt.Rows)
           			{
           				for (int i = 0; i < engine.Helpers.SQLUtility.dt.Columns.Count; i++)
           				{
           					Report.Info("Extract - Outcome: " + engine.Helpers.SQLUtility.dt.Columns[i].ColumnName + " - Value: " + GetExtractValue(row[colIndex].ToString(), engine.Helpers.SQLUtility.dt.Columns[i].ColumnName) +
           					           " Database - Outcome: " + engine.Helpers.SQLUtility.dt.Columns[i].ColumnName + " - Value: " + engine.Helpers.SQLUtility.dt.Rows[rowIndex][i].ToString());
           					//Report.Info(engine.Helpers.SQLUtility.dt.Columns[i].ColumnName + " : " + engine.Helpers.SQLUtility.dt.Rows[rowIndex][i].ToString());
           				}
           				rowIndex++;
           			}
           		}
           		else
           		{
           			colIndex++;
           		}
           }
				
        }

    }
}
