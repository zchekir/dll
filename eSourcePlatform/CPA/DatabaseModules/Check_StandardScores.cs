///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace CPA.DatabaseModules
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Check_StandardScores recording.
    /// </summary>
    [TestModule("3eccf15a-aaec-4a30-be95-c20b92f6f4c2", ModuleType.Recording, 1)]
    public partial class Check_StandardScores : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::CPA.CPARepository repository.
        /// </summary>
        public static global::CPA.CPARepository repo = global::CPA.CPARepository.Instance;

        static Check_StandardScores instance = new Check_StandardScores();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Check_StandardScores()
        {
            DBServer = "cgst-qc.database.windows.net";
            Database = "";
            dbUsername = "";
            dbPassword = "";
            Authentication = "Active Directory Password";
            TestIdentifier = "E00C148B-3D73-44E0-8AC9-024C50AB397B";
            PrimaryOutcome = "0.970444658471641";
            StandardScoreZ = "-2.9910644585573";
            StandardScoreT = "70.089355414427";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Check_StandardScores Instance
        {
            get { return instance; }
        }

#region Variables

        string _DBServer;

        /// <summary>
        /// Gets or sets the value of variable DBServer.
        /// </summary>
        [TestVariable("322ae572-6d7e-4361-a7cf-870768eea420")]
        public string DBServer
        {
            get { return _DBServer; }
            set { _DBServer = value; }
        }

        string _Database;

        /// <summary>
        /// Gets or sets the value of variable Database.
        /// </summary>
        [TestVariable("9c70fea9-0cb3-4659-b09f-7def2b08284a")]
        public string Database
        {
            get { return _Database; }
            set { _Database = value; }
        }

        string _dbUsername;

        /// <summary>
        /// Gets or sets the value of variable dbUsername.
        /// </summary>
        [TestVariable("46ffc4a6-6821-4af3-b0eb-002edad63b1d")]
        public string dbUsername
        {
            get { return _dbUsername; }
            set { _dbUsername = value; }
        }

        string _dbPassword;

        /// <summary>
        /// Gets or sets the value of variable dbPassword.
        /// </summary>
        [TestVariable("0196697e-cc3a-4ffc-8497-4cb3a2761031")]
        public string dbPassword
        {
            get { return _dbPassword; }
            set { _dbPassword = value; }
        }

        string _Authentication;

        /// <summary>
        /// Gets or sets the value of variable Authentication.
        /// </summary>
        [TestVariable("55960405-c7ce-4709-bfe6-b0e8ba9f96b3")]
        public string Authentication
        {
            get { return _Authentication; }
            set { _Authentication = value; }
        }

        string _TestIdentifier;

        /// <summary>
        /// Gets or sets the value of variable TestIdentifier.
        /// </summary>
        [TestVariable("15bc254a-10f8-4311-8cfa-f9e4e741e42b")]
        public string TestIdentifier
        {
            get { return _TestIdentifier; }
            set { _TestIdentifier = value; }
        }

        string _PrimaryOutcome;

        /// <summary>
        /// Gets or sets the value of variable PrimaryOutcome.
        /// </summary>
        [TestVariable("5568802f-814f-4937-92f6-0911f36e6e57")]
        public string PrimaryOutcome
        {
            get { return _PrimaryOutcome; }
            set { _PrimaryOutcome = value; }
        }

        string _StandardScoreZ;

        /// <summary>
        /// Gets or sets the value of variable StandardScoreZ.
        /// </summary>
        [TestVariable("6c516752-ad7c-4ae5-b9ab-76b48c70632f")]
        public string StandardScoreZ
        {
            get { return _StandardScoreZ; }
            set { _StandardScoreZ = value; }
        }

        string _StandardScoreT;

        /// <summary>
        /// Gets or sets the value of variable StandardScoreT.
        /// </summary>
        [TestVariable("98637311-14b9-429f-ab97-efc07cddba4c")]
        public string StandardScoreT
        {
            get { return _StandardScoreT; }
            set { _StandardScoreT = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Outcome_Validation(DBServer, Database, dbUsername, dbPassword, Authentication, TestIdentifier, PrimaryOutcome, StandardScoreZ, StandardScoreT);
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
