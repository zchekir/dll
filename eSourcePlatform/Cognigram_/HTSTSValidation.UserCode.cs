///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Cognigram_
{
	public class HTSTvalidation
	{
		
		
		public string UserEmail { get; set; }
		
		
		
		public HTSTvalidation(string UserEmail)
		{
			this.UserEmail=UserEmail;
		}
	}
	
    public partial class HTSTSValidation
    {
       
        private void Init()
        {
            
        }

        public void HTSTSfERIFICATION ()
        {
            
        }

        public void HTSTCheck(string UserEmail, string DOM)
        {
           
			string ExpectedHTST="31536000";
			string keys="";
			string values=""; 
				
			string url = "https://" + DOM +"/svc/api/profiles/forgotpassword";
			//Setup API call
			HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(url);
			httpRequest.ContentType = "application/json";
			httpRequest.Method = "POST";
		
			//var headesr= httpRequest.Headers.get();
			
			
		
			
			
			//Create JSON object containing demographics and study details
			HTSTvalidation HTSTObject = new HTSTvalidation(UserEmail);
			
			
			using (StreamWriter sw = new StreamWriter(httpRequest.GetRequestStream()))
			{
				string json = new JavaScriptSerializer().Serialize(HTSTObject);
				
				//Debugging Request
				Report.Info("Data to send: " + json);
				
				sw.Write(json);
				sw.Flush();
				sw.Close();
				
			}      
			// getting back Headers information
			        HttpWebResponse HttpWebResponse = (HttpWebResponse )httpRequest.GetResponse();
			        for(int i=0; i < HttpWebResponse.Headers.Count; ++i) 
			        {
			     	keys =HttpWebResponse.Headers.Keys[i].ToString();
			     	values =HttpWebResponse.Headers[i].ToString();
			     	Report.Info("Headers information"+keys+values);
			     	
			     			
			     	}
			     	
			     	
                   // check the browser header values
			     	if (values != null)
			     	 {
			     		
			     		Report.Info("The webSite has HTST security as expected");
			     		
			     	 }else{
			     		Report.Error("The webSite doesn't  have HTST security as expected");
			     		
			     	      }
			     	
			     }
			        
        }

    }

