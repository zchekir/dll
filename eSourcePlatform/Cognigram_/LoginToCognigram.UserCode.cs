///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;


namespace Cognigram_
{
	public class cognigLogin
	{
		
		
		public string userName { get; set; }
		
		public string password { get; set; }
		
		
		public cognigLogin(string userName,string  password)
		{
			this.userName=userName;
			this. password= password;
		}
	}
	
	
	
	// response:
	public class Logintoken
	{
		
		
		public string authToken { get; set; }
		
		
		
		
		public  Logintoken()
		{
			
		}
	}
	
    public partial class LoginToCognigram
    {
       //variables:
       string response;
       string token;
        private void Init()
        {
           
        }

        public void CognigramLogin(string DOM, string userName, string password)
        {
        	
        	 
        	
				
			string url = "https://staging.cognigram.us/svc/api/cognigram/login";
				        
				//"https://"+DOM+"/svc/api/cognigram/login";
			//Setup API call
			HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(url);
			httpRequest.ContentType = "application/json";
			httpRequest.Method = "POST";
		
			
			
			
		
			
			
			//Create JSON object containing demographics and study details
			cognigLogin loginbject = new cognigLogin(userName,password);
			using (StreamWriter sw = new StreamWriter(httpRequest.GetRequestStream()))
			{
				string json = new JavaScriptSerializer().Serialize(loginbject);
				
				//Debugging Request
				Report.Info("Data to send: " + json);
				
				sw.Write(json);
				sw.Flush();
				sw.Close();
				
			}     
			
        	

        	
          // getting respont:
            HttpWebResponse httpResponse = (HttpWebResponse)httpRequest.GetResponse();
			Logintoken responseObject = new  Logintoken();
			using (StreamReader sr = new StreamReader(httpResponse.GetResponseStream()))
			{
				response= sr.ReadToEnd();
				responseObject = new JavaScriptSerializer().Deserialize<Logintoken>(response);
				token = responseObject.authToken;
				
			}          
			Report.Info("response: " + response);
			Report.Info("LoginToken " + token);
          
        }

    }
}
