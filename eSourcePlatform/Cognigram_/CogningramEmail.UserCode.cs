///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Cognigram_
{
		public class emailvalidation
	{
		
		
		public string UserEmail { get; set; }
		
		
		
		public emailvalidation(string UserEmail)
		{
			this.UserEmail=UserEmail;
		}
		
		}
		
		/// </summary>
		public class request
	{
		
		
		public string UserEmail { get; set; }
		
		
		
		public request()
		{
			
		}
	}
		
		
	//////////////////////////////////	
    public partial class CogningramEmail
    {
       
        private void Init()
        {
            
        }

        public void EmailConigram(string UserEmail, string DOM)
        {
           // local variables 
        	var ExpectedHTST="max-age=31536000";
			string keys="";
			string values=""; 
			string emailconfirmation ="staging.cognigram.us↵Content-Length";
			string resetEmail = "success: false,failedMessage: Invalid Email. Please contact your administrator for assistance";
			int counter = 0;
				
			// send reset passwrod API CALL
			string url = "https://" + DOM +"/svc/api/profiles/forgotpassword";
			//Setup API call
			HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(url);
			httpRequest.ContentType = "application/json";
			httpRequest.Method = "POST";
			
		    
			//Create JSON object containing demographics and study details
			emailvalidation HTSTObject = new emailvalidation(UserEmail);
			
			
			using (StreamWriter sw = new StreamWriter(httpRequest.GetRequestStream()))
			{
				string json = new JavaScriptSerializer().Serialize(HTSTObject);
				
				
				
				
				sw.Write(json);
				sw.Flush();
				sw.Close();
				
			}   
			
			       // getting back Headers information
			       HttpWebResponse HttpWebResponse = (HttpWebResponse )httpRequest.GetResponse();
			       
			       //capturing request header infos
			       char[] mych = { ':','&', ',','?','=','{','}'};
			       string conigramEmail =httpRequest.Headers.ToString();
			       string[] headerInfos=conigramEmail.Split(mych);
			       Report.Info("headers"+conigramEmail );
			      
			       request responseObject = new request();
			
			using (StreamReader sr = new StreamReader(HttpWebResponse.GetResponseStream()))
			{
				string response = sr.ReadToEnd();
				responseObject = new JavaScriptSerializer().Deserialize<request>(response);
				
				
				
				//response validation to check if the email send successfully:
				Report.Info("Emailsent for Password reset"+response);
				if (response != resetEmail){
					
					Report.Info("TESTPASSED, Email sent as expected ");
				}else{
					Report.Error("TESTFAILED, Wrong Email");
				}
				
				
				
				Validate.AreEqual(headerInfos[2],emailconfirmation);
				
				//requeste header halidation  validation to check the sending email envirnment:
				
				foreach (var infos in headerInfos){
					if (infos == emailconfirmation){
						
						Report.Info("TESTPASSED");
						break;
						counter++;

					}else{
						Report.Error(infos);
					}
					
				}
				
				
				
			       
			        
			       
			
			 

    }
}

    }
}