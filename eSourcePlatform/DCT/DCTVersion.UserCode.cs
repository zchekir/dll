///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace DCT
{
    public partial class DCTVersion
    {
    	string Version;
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Get_value_DCTValidationVersion(RepoItemInfo divtagInfo)
        {
            Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'divtagInfo' and assigning its value to variable 'DCTActualVersion'.", divtagInfo);
            DCTActualVersion = divtagInfo.FindAdapter<DivTag>().Element.GetAttributeValueText("InnerText");
            
            
            // splitting version number
        	string[] splitClientVersion = DCTActualVersion.Split('.');
        	Version = DCTActualVersion[0] + " " + DCTActualVersion[1] + " " + DCTActualVersion[2] + " " + DCTActualVersion[3] + " " +  DCTActualVersion[4] + " " +  DCTActualVersion[5]+ " " +  DCTActualVersion[6]+ " " +  DCTActualVersion[7]+ " " +  DCTActualVersion[8]+ " " +  DCTActualVersion[9]+ "." +  DCTActualVersion[10]+ "." +  DCTActualVersion[11];
        	Report.Log(ReportLevel.Info, "DCTVersion"+ " :" + " " + Version);
        	
        	
        }

        public void Validate_DCTValidationVersion(RepoItemInfo divtagInfo)
        {
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual ($ExpectedDCTVersion='zak') on item 'divtagInfo'.", divtagInfo);
            Validate.AttributeEqual(divtagInfo, ExpectedDCTVersion, Version);
        }

        

    }
}
