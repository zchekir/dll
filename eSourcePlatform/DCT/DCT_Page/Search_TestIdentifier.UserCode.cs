///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace DCT.DCT_Page
{
    public partial class Search_TestIdentifier
    	
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

		/// <summary>
		/// Searches for the Supplied Test Identifier. If it is not found, clear the field and try again
		/// </summary>
        public void TryFindAssessment(RepoItemInfo TestIdentifierField, RepoItemInfo ResultItem, RepoItemInfo FindButton)
        {
        	do {
        		
        		TestIdentifierField.FindAdapter<InputTag>().PressKeys("{Home}{LShiftKey down}{End}{LShiftKey up}{Delete}", 1);
        		Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$TestIdentifier' with focus on 'inputtagInfo'.", TestIdentifierField);
            	TestIdentifierField.FindAdapter<InputTag>().PressKeys(TestIdentifier, 10);
            	Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DataCleaningTool.ClickFindByAssessmentId' at Center.", repo.DataCleaningTool.FindByAssessmentIdButtonInfo, new RecordItemIndex(1));
            	FindButton.FindAdapter<SpanTag>().Click();
            	Delay.Duration(2500);
            	
        	} while (!ResultItem.Exists(new Duration(5000)));
        		
        }

    }
}
