///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace DCT.DCT_Page
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Query_DCT_Version recording.
    /// </summary>
    [TestModule("9f2b6e02-9486-49ab-bcbe-42714eb80706", ModuleType.Recording, 1)]
    public partial class Query_DCT_Version : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::DCT.DCTRepository repository.
        /// </summary>
        public static global::DCT.DCTRepository repo = global::DCT.DCTRepository.Instance;

        static Query_DCT_Version instance = new Query_DCT_Version();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Query_DCT_Version()
        {
            DCTVersionQuery = "(get-item -Path 'D:\\home\\site\\wwwroot\\app_data\\jobs\\continuous\\*\\Cogstate.*.exe').VersionInfo";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Query_DCT_Version Instance
        {
            get { return instance; }
        }

#region Variables

        string _DCTVersionQuery;

        /// <summary>
        /// Gets or sets the value of variable DCTVersionQuery.
        /// </summary>
        [TestVariable("9a8929ee-dc8a-46dc-99f0-46052dbbd846")]
        public string DCTVersionQuery
        {
            get { return _DCTVersionQuery; }
            set { _DCTVersionQuery = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable AzureDOM.
        /// </summary>
        [TestVariable("49e5b85f-1ec2-4934-a251-0656cf1bbe62")]
        public string AzureDOM
        {
            get { return repo.AzureDOM; }
            set { repo.AzureDOM = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'KuduServices.PowerShellConsol'", repo.KuduServices.PowerShellConsolInfo, new ActionTimeout(60000), new RecordItemIndex(0));
            repo.KuduServices.PowerShellConsolInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Wait", "Waiting 1m to exist. Associated repository item: 'KuduServices.PowerShellPrompt'", repo.KuduServices.PowerShellPromptInfo, new ActionTimeout(60000), new RecordItemIndex(1));
            repo.KuduServices.PowerShellPromptInfo.WaitForExists(60000);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'KuduServices.PowerShellConsol' at Center.", repo.KuduServices.PowerShellConsolInfo, new RecordItemIndex(2));
            repo.KuduServices.PowerShellConsol.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DCTVersionQuery' with focus on 'KuduServices.PowerShellConsol'.", repo.KuduServices.PowerShellConsolInfo, new RecordItemIndex(3));
            repo.KuduServices.PowerShellConsol.PressKeys(DCTVersionQuery, 1);
            Delay.Milliseconds(90);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{ENTER}'.", new RecordItemIndex(4));
            Keyboard.Press("{ENTER}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 2s.", new RecordItemIndex(5));
            Delay.Duration(2000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
