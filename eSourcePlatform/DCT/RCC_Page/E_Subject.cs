///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace DCT.RCC_Page
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The E_Subject recording.
    /// </summary>
    [TestModule("6ba8d2d0-d8f5-489f-8747-9690991ebcc3", ModuleType.Recording, 1)]
    public partial class E_Subject : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::DCT.DCTRepository repository.
        /// </summary>
        public static global::DCT.DCTRepository repo = global::DCT.DCTRepository.Instance;

        static E_Subject instance = new E_Subject();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public E_Subject()
        {
            DCTSubject = "test";
            DCTVisit = "Visit";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static E_Subject Instance
        {
            get { return instance; }
        }

#region Variables

        string _DCTVisit;

        /// <summary>
        /// Gets or sets the value of variable DCTVisit.
        /// </summary>
        [TestVariable("ebdbd210-ee97-4ffa-8fac-895ff919ef75")]
        public string DCTVisit
        {
            get { return _DCTVisit; }
            set { _DCTVisit = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable DCTSubject.
        /// </summary>
        [TestVariable("c0571c73-1af6-47f2-9475-f5d78be0ac3c")]
        public string DCTSubject
        {
            get { return repo.DCTSubject; }
            set { repo.DCTSubject = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            //SubJect(DCTSubject);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(1));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'DataCleaningTool.E_Subject' at Center.", repo.DataCleaningTool.E_SubjectInfo, new RecordItemIndex(2));
            repo.DataCleaningTool.E_Subject.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$DCTSubject' with focus on 'DataCleaningTool.E_Subject'.", repo.DataCleaningTool.E_SubjectInfo, new RecordItemIndex(3));
            repo.DataCleaningTool.E_Subject.PressKeys(DCTSubject);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 1s.", new RecordItemIndex(4));
            Delay.Duration(1000, false);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{TAB}'.", new RecordItemIndex(5));
            Keyboard.Press("{TAB}");
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
