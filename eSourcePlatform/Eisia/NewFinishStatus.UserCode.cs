///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Newtonsoft.Json.Linq;

namespace Eisia
{
	 public class setFinishkWorkflowJSONRequest
	{
		public string id { get; set; }
	
		
		
	/// Object for creating a new workflow request
		public setFinishkWorkflowJSONRequest()
		{
			
		
		}
		
	}
	
	
    public partial class NewFinishStatus
    {
        
        private void Init()
        {
           
        }

        public void FinishStatus(string Toke, string WorkflowID, string SetStatusID, string SestJSON, string CPADOM)
        {
          
        	Report.Log(ReportLevel.Info, "NEWSetStatusID  " + "  "+ SetStatusID );
        	
        	
          //variable
		    string url = "https://"+CPADOM+"/api/workflows/"+WorkflowID+"/workflowBlocks/"+SetStatusID;
		    	
		     
			
			//Setup API call
			HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(url);
			httpRequest.ContentType = "application/json";
			httpRequest.Method = "PUT";
			httpRequest.Headers.Add("Authorization", Toke);
			
			
			
			// sending the data in the body and replacing the studyid, studyname and version
			using (StreamWriter sw = new StreamWriter(httpRequest.GetRequestStream()))
			{
		 	
		    // creating block ID 
		    int x = Int32.Parse(SetStatusID);
		    int id_Test= x-1;
		    string secondblockID =id_Test.ToString();
		    
		       Report.Log(ReportLevel.Info, "ZAKbLOCK secondblockID" + secondblockID);
		    
               var testData = SestJSON.Replace(@"<wfid>", WorkflowID).Replace(@"<SetStatusID>", SetStatusID).Replace(@"<secondblockID>", secondblockID);
				Report.Info("Data to send: " + testData);
				
				sw.Write(testData);
				sw.Flush();
				sw.Close();
			}
			
			
			
			//Get response and store in new object
			HttpWebResponse httpResponse = (HttpWebResponse)httpRequest.GetResponse();
			
			setFinishkWorkflowJSONRequest responseObject = new setFinishkWorkflowJSONRequest();
			
			using (StreamReader sr = new StreamReader(httpResponse.GetResponseStream()))
			{
				string response = sr.ReadToEnd();
				responseObject = new JavaScriptSerializer().Deserialize<setFinishkWorkflowJSONRequest>(response);
				
				
			
			Report.Log(ReportLevel.Info, "id " + response );
				
			 }
			
        	
        	
        }

    }
}
