///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace Eisia
{
    public partial class InternalUserCreation
    {
    	 	//variables:
		public static DataTable dt = new DataTable();
        
        private void Init()
        {
            
        }

        public void NewInternalUser(string DBServer, string Database, string dbUsername, string dbPassword, string Authentication, string InternalPassword, string InternalUserName)
        {
            
        	
        		

        	//Creating an INTERNAL User :
			
			dt.Reset();
			
			
			// QueryDB
			string query = @"DECLARE @username varchar(50) = 'automationscript@cogstate.com'

 


--password for this account is 3A253852-3BA3-42C3-9B25-EEA7A42D1422

 

--------
DECLARE @CreatedByUserId varchar(20) = 'QC_person_manual_script'
DECLARE @currentDate datetime = getutcdate()
DECLARE @userid int = -100
select @userid=min(id) from userdata.[user]
if @userid>-100
    set @userid=-99
set @userid=@userid-1

 

if not exists(select username from userdata.[user] where username=@username)
begin


 

-------------[UserData].[Person]---------------------
SET IDENTITY_INSERT [UserData].[Person] ON 

 

INSERT [UserData].[Person] ([Id], [FirstName], [LastName], [CreateUserId],  [CreatedByUserId], [CreateDate], [UpdateDate], [UpdatedByUserId]) 
    VALUES (@userid, @username, 'Hub' , @userid, @CreatedByUserId, @currentDate, @currentDate, @CreatedByUserId)    

 

SET IDENTITY_INSERT [UserData].[Person] OFF

 

-------------[UserData].[User]---------------------

 

SET IDENTITY_INSERT [UserData].[User] ON 

 

-- password: 3A253852-3BA3-42C3-9B25-EEA7A42D1422
INSERT [UserData].[User] ([Id], [UserName], [Password], [PasswordSalt], [IsSuperAdmin], [CreateDate], [CreatedByUserId], [PersonId], [Active], [UpdateDate], [UpdatedByUserId]) 
    VALUES (@userid , @username , N'Ge87qUyQ2m4HN+7lUOsgRQJcBvax4/IsrhOH88D/XO0=', N'b6c258d3af7248bdb044c1bdff68ace4', N'0', @currentDate, @CreatedByUserId, @userid, 1, @currentDate, @CreatedByUserId)

 

SET IDENTITY_INSERT [UserData].[User] OFF 

 


-------------[UserData].[PortUser]---------------------
--hub users need to be set as DefaultPortal which [PortId] is fixed to 1

 

INSERT [UserData].[PortUser] ([PortId], [UserId], [CreateDate], [CreatedByUserId], [UpdateDate], [UpdatedByUserId]) 
VALUES ( 1, @userid, @currentDate, @CreatedByUserId, @currentDate, @CreatedByUserId)

 


-------------[UserData].[UserModAuthRol]---------------------
DECLARE @ModAuthRolForAdmin TABLE( ModAuthRolId int)

 

INSERT INTO @ModAuthRolForAdmin 
SELECT  [Auth].[ModAuthRol].Id
  FROM  [Auth].[ModAuthRol] 
        join [Auth].[AuthRol] on [Auth].[ModAuthRol] .AuthRolId=[Auth].[AuthRol].[Id]
        join [Module].[Mod] on [Auth].[ModAuthRol] .[ModId] = [Module].[Mod].[Id]
 WHERE 
        [Auth].[AuthRol].Name in ('Admin')

 

INSERT INTO [UserData].[UserModAuthRol](UserId, ModAuthRolId, CreatedByUserId, CreateDate, UpdatedByUserId, UpdateDate)
        SELECT u.Id, a.ModAuthRolId, @CreatedByUserId, @currentDate, @CreatedByUserId, @currentDate
          FROM [UserData].[User] u 
             CROSS JOIN @ModAuthRolForAdmin a
         WHERE u.Id in (@userid)

 

end
else
print @username + ' has already been added'

 

select TOP 1
UserName
from userdata.[user]
where username='automationscript@cogstate.com'
order by createDate desc";
			
			
			
			
		
				
			//Connecting to SQL DB:
			string sqlConnString = string.Format("Server={0};Database={1};User Id={2};Password={3};Authentication={4};Connection Timeout={5};", DBServer, Database, dbUsername, dbPassword, Authentication, "30");
			//CreateObject:
			SqlDataAdapter da = new SqlDataAdapter(query, sqlConnString);
			da.SelectCommand.Parameters.AddWithValue("@UserName1", InternalUserName);
			
			
			
			// Get the data from DB
			try{
				
				using (da)
					da.Fill(dt);
				
				
				string[] Iusername= new string[dt.Rows.Count];
				
				for (int i = 0; i < dt.Rows.Count; i++)
               {
					Iusername[i]=dt.Rows[i][0].ToString();
					
    
                }
				
				    NewInternalUsername =Iusername[0] ;
				    NewInternalPassword="3A253852-3BA3-42C3-9B25-EEA7A42D1422";
					
                 


				
				
				
				//Pringting the resutls:
				Report.Log(ReportLevel.Info,  "InternalUserName : " + "  " +  NewInternalUsername );
				Report.Log(ReportLevel.Info,  "InternalPassword : " + "  " + NewInternalPassword);
			   
				
				
			}catch (Exception e){
				
				Report.Log(ReportLevel.Info,  "Error: " + e.Message );
			}
        	
        	
        	
        }

    }
}
