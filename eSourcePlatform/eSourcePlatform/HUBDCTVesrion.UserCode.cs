///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Newtonsoft.Json;

using Newtonsoft.Json.Linq;



	public class rowsJSONResponse
	{
		
		
		
		
		public string rows { get; set; }
		
		
		
		public rowsJSONResponse()
		{
			
		}
  
	}
namespace eSourcePlatform
{
	


    public partial class HUBDCTVesrion
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void DCTHUBVersion(string EvKey, string Ahuky, string Query, string TimeStmp)
        {
            
			//Setup API call
			//HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create("https://" + DOM + "/api/external/V2/" + studyProtocolName  + "/assessmentattempt/" + TestIdentifier + "/qualificationstatus");
			
			HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create("https://api.applicationinsights.io/v1/apps/"+   EvKey  +  "/query?timespan="  + TimeStmp + "&query="+ Query);
			
			httpRequest.ContentType = "application/json";
			httpRequest.Method = "GET";
			httpRequest.Headers.Add("x-api-key", Ahuky);
			
			HttpWebResponse httpResponse = (HttpWebResponse)httpRequest.GetResponse();
			rowsJSONResponse responseObject = new rowsJSONResponse();
			
			using (StreamReader sr = new StreamReader(httpResponse.GetResponseStream()))
			{
				string response = sr.ReadToEnd();
				responseObject = new JavaScriptSerializer().Deserialize<rowsJSONResponse>(response);
				
				//string  rowsResults = responseObject.rows;
				
				Report.Log(ReportLevel.Info,  response);
			//	Report.Log(ReportLevel.Info,  rowsResults);
				
			}
        }

    }

}
