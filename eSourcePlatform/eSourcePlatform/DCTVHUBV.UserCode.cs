///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Newtonsoft.Json;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;

using Newtonsoft.Json.Linq;

namespace eSourcePlatform
{
	
	
	public class AssemblyVersion
    {
        public string Version;
        public string TenantName;
        public string StudyFilters;
    }
  
public class rowsJSONResponseA
	{
		
		
		
		
		public string rows { get; set; }
		
		
		
		public rowsJSONResponseA()
		{
			
		}
  
	}



	public partial class DCTVHUBV
    {
       
        private void Init()
        {
            
        }

        public void VersionHUB(string EvKey, string Ahuky, string Query, string TimeStmp)
        {
           
				
			var httpClient = new HttpClient();
            httpClient.DefaultRequestHeaders.Accept.Add(
            new MediaTypeWithQualityHeaderValue("application/json"));
            httpClient.DefaultRequestHeaders.Add("x-api-key", Ahuky);

            var response =  httpClient.GetAsync("https://api.applicationinsights.io/v1/apps/"+   EvKey  +  "/query?timespan="  + TimeStmp + "&query="+ Query).GetAwaiter().GetResult();
            
            var responseString = response.Content.ReadAsStringAsync().GetAwaiter().GetResult();

            var anonymousTypeObject = new {tables = new[] {new {name = "", rows = new[] { new List<dynamic>() } }}};

            var responseObject =Newtonsoft.Json.JsonConvert.DeserializeAnonymousType(responseString, anonymousTypeObject);
            
            var assemblyVersionString = responseObject.tables.First().rows.First().ElementAt(3);

            AssemblyVersion version = Newtonsoft.Json.JsonConvert.DeserializeObject<AssemblyVersion>(assemblyVersionString);
            
            //Expected Hub Vesrion:
            string ExpHubversion="2.1.0-rc.2135";
            string ExpTenantNameversion="cgst-qc-jackson-hub";
                 
             //Validating the version: 
             
             Validate.AreEqual("HubVersion: "+ version.Version ,"HubVersion: "+ ExpHubversion);
             Validate.AreEqual("TenntName: "+version.TenantName ,"TenntName: "+ ExpTenantNameversion);
           
                                                	
                              	  
          

				
				
				
        }
        }

    }

