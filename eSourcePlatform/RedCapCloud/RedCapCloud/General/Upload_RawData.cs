///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace RedCapCloud.General
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Upload_RawData recording.
    /// </summary>
    [TestModule("4b7c8d87-c912-439e-bc77-334ef8709512", ModuleType.Recording, 1)]
    public partial class Upload_RawData : ITestModule
    {
        /// <summary>
        /// Holds an instance of the global::RedCapCloud.RedCapCloudRepository repository.
        /// </summary>
        public static global::RedCapCloud.RedCapCloudRepository repo = global::RedCapCloud.RedCapCloudRepository.Instance;

        static Upload_RawData instance = new Upload_RawData();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Upload_RawData()
        {
            DataFile = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Upload_RawData Instance
        {
            get { return instance; }
        }

#region Variables

        string _DataFile;

        /// <summary>
        /// Gets or sets the value of variable DataFile.
        /// </summary>
        [TestVariable("8fc570d6-3f7a-415d-b8e3-72a0b3b97474")]
        public string DataFile
        {
            get { return _DataFile; }
            set { _DataFile = value; }
        }

        /// <summary>
        /// Gets or sets the value of variable RCCDOM.
        /// </summary>
        [TestVariable("6f24cf1a-0e47-4c45-9ce6-3e042db234d2")]
        public string RCCDOM
        {
            get { return repo.RCCDOM; }
            set { repo.RCCDOM = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Wait", "Waiting 1.5m to exist. Associated repository item: 'REDCapCloud.iFrame.SkipButton'", repo.REDCapCloud.iFrame.SkipButtonInfo, new ActionTimeout(90000), new RecordItemIndex(0));
            repo.REDCapCloud.iFrame.SkipButtonInfo.WaitForExists(90000);
            
            AddRawData(DataFile);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 500ms.", new RecordItemIndex(2));
            Delay.Duration(500, false);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'REDCapCloud.iFrame.SkipButton' at Center.", repo.REDCapCloud.iFrame.SkipButtonInfo, new RecordItemIndex(3));
            repo.REDCapCloud.iFrame.SkipButton.Click(100);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Delay", "Waiting for 5s.", new RecordItemIndex(4));
            Delay.Duration(5000, false);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
