///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Newtonsoft.Json.Linq;

namespace Eisai.APIModules
{
	public class PublishWorkflowJSONRequest
	{
		public string publish;
		public string id { get; set; }
	
		
	/// Object for creating a new workflow request
		public PublishWorkflowJSONRequest()
		{
			
		
		}
		
	}
    public partial class NewPublishWorkFlow
    {
       
        private void Init()
        {
            
        }

        public void PublishWorkflow(string Token, string WorkflowID, string p_workflowData, string BlockID, string stateid_ONE, string stateid_TWO, string TabletConfig, string Desktop)
        {
            Report.Info("BlockID" + BlockID);
        	
        	try {
        		
        	
        	 //variable
		    string url = "https://" + CPADOM + "/api/workflows/" + WorkflowID + "/publish";
			//Setup API call
			HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(url);
			httpRequest.ContentType = "application/json";
			httpRequest.Method = "POST";
			httpRequest.Headers.Add("Authorization", Token);
			
			
			// sending the data in the body and replacing the studyid, studyname and version
			using (StreamWriter sw = new StreamWriter(httpRequest.GetRequestStream()))
			{
		 	
		    
                var testData = p_workflowData; //.Replace(@"<TabletConfig>", TabletConfig).Replace(@"<Desktop>", Desktop);
				Report.Info("Data to send: " + testData);
				
				sw.Write(testData);
				sw.Flush();
				sw.Close();
			}
           
			
			
			//Get response and store in new object
			HttpWebResponse httpResponse = (HttpWebResponse)httpRequest.GetResponse();
			
			PublishWorkflowJSONRequest responseObject = new PublishWorkflowJSONRequest();
			
			using (StreamReader sr = new StreamReader(httpResponse.GetResponseStream()))
			{
				string response = sr.ReadToEnd();
				responseObject = new JavaScriptSerializer().Deserialize<PublishWorkflowJSONRequest>(response);
				//PublishWorkflowJSONRequest publish = Newtonsoft.Json.JsonConvert.DeserializeObject<PublishWorkflowJSONRequest>(response);
			
				string id = responseObject.id;
				Report.Log(ReportLevel.Info, "Workflow published!  " + id );
				
			 }
        	
			
        	}catch (Exception e)

        	{
            	string infos="Type 'CPA.PublishWorkflowJSONRequest' is not supported for deserialization of an array.";
            	
            	if (infos == e.Message ){
            		
            		Report.Log(ReportLevel.Info, "Workflow Published as expected");
            	}else{
            		
            		Report.Log(ReportLevel.Info, "error ", e.Message);
            	}
               
               
             }
        }

    }
}
