///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace CSP
{
	public class AssessmentAttemptJSONRequest
	{
		/// <summary>---------------------------------------------------------
		/// External ID for the participant we want to send through the API
		/// </summary>
		public string externalId { get; set; }
		
		/// <summary>
		/// Date of Birth for the participant we want to send through the API
		/// </summary>
		public string dob { get; set; }
		
		/// <summary>
		/// Gender code for the participant we want to send through the API
		/// </summary>
		public string genderCode { get; set; }
		
		/// <summary>
		/// Language which should be displayed
		/// </summary>
		public string localityCode { get; set; }
		
		/// <summary>
		/// Message to post if an error occurs
		/// </summary>
		public string postError { get; set; }
		
		/// <summary>
		/// Code for the visit we want to run
		/// </summary>
		public string visitSessionCode { get; set; }
		
		/// <summary>
		/// Message to post upon completion
		/// </summary>
		public string post { get; set; }
		
		/// <summary>
		/// The id of the supervisor condicting the test
		/// </summary>
		public string supervisorId { get; set; }
		
		/// <summary>----------------------------------------------------------------------------
		/// Object for creating a new workflow request
		
		public AssessmentAttemptJSONRequest(string externalId, string dob, string genderCode, string localityCode,
		                                    string postError, string post, string visitSessionCode, string supervisorId)
		{
			this.externalId = externalId;
			this.dob = dob;
			this.genderCode = genderCode;
			this.localityCode = localityCode;
			this.postError = postError;
			this.post = post;
			this.visitSessionCode = visitSessionCode;
			this.supervisorId = supervisorId;
		}
	}
	
	/// <summary>----------------------------------------------------------------------
	/// Class definition for JSON object which is received after requesting a testing URL
	/// </summary>
	   public class AssessmentAttemptJSONResponse
	   {
		/// <summary>
		/// Returned authtoken from API following a workflow instance request
		/// </summary>
		public string workflowAuthToken { get; set; }
		
		/// <summary>----------------------------------------------------------------
		/// The returend locality code
		/// </summary>
		public string localityCode { get; set; }
		
		/// <summary>---------------------------------------------------------------
		/// Returned URL for running the battery
		/// </summary>
		public string url { get; set; }
		
		/// <summary>---------------------------------------------------------------
		/// Unique ideitifer to the test
		/// </summary>
		public string testIdentifier { get; set; }
		
		public AssessmentAttemptJSONResponse()
		{
			
		}
	}
    public partial class WorkFlowInstance
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        
        
        //variables:
        
        
	       
	     string url="https://cgst-qc-orr.azurewebsites.net/api/external/V2/AutomationStudy/AssessmentAttempt";
	       //string dob1 = "2000-01-01";
	      // string authoToken1 = " zIgOgdLNEAzGEjvyONsrg1tgK2SSCu-8axAr8WOF52erGxL9SEyBZ7krKrwub3Wyp";
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Workflow(string authoToken, string studyProtoclName, string DOM, string dob, string genderCode, string localityCode, string postError, string post)
        {
        	//"https://"+ DOM +wkFlowAPI+ studyProtocolName + "AssessmentAttempt"
        	
        	
        	string wkFlowAPI ="/api/external/V2/"; 
            //Setup API call
        	HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(url);
        	httpRequest.ContentType = "application/json";
        	httpRequest.Method = "POST";
        	httpRequest.Headers.Add("Authorization", authoToken);
        	
        	//Check if external id is empty and generate a random number if true
        	
        	//if (externalId == "")
        	//{
        		//Report.Info("No External id passed through, generating external id...");
        		Random r = new Random();
                int number = r.Next(1,999999);
        		externalId = number.ToString();
        	//}
        	
        	//Create JSON object containing demographics and study details
        	AssessmentAttemptJSONRequest assessmentObject = new AssessmentAttemptJSONRequest(externalId, dob, genderCode, localityCode, postError, post, visitSessionCode, supervisorId);
        	Report.Log(ReportLevel.Info, "externalid: " + externalId);
        	
        	using (StreamWriter sw = new StreamWriter(httpRequest.GetRequestStream()))
        	{
        		string json = new JavaScriptSerializer().Serialize(assessmentObject);
        		
        		//Debugging Request
        		Report.Info("Data to send: " + json);
        		
        		sw.Write(json);
        		sw.Flush();
        		sw.Close();
        	}
        	
        	//Get response and store in new object
        	HttpWebResponse httpResponse = (HttpWebResponse)httpRequest.GetResponse();
        	
        	AssessmentAttemptJSONResponse responseObject = new AssessmentAttemptJSONResponse();
        	
        	using (StreamReader sr = new StreamReader(httpResponse.GetResponseStream()))
        	{
        		string response = sr.ReadToEnd();
        		responseObject = new JavaScriptSerializer().Deserialize<AssessmentAttemptJSONResponse>(response);
        		
        		var AssessmentURL = responseObject.url;
        		TestIdentifier = responseObject.testIdentifier;
        		
        		Report.Log(ReportLevel.Info, "Assessment Attempt Created, URL is: " + AssessmentURL);
        		Report.Log(ReportLevel.Info, "Assessment Attempt Created, TestIdentifier is: " + TestIdentifier);
        	}
        }

    }
}
