///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using System.Management;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace CSP.General
{
    public partial class Disconnect_Internet
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        /// <summary>
        /// This method will either enable or disable the Ethernet adapter depending on the operation passed through
        /// </summary>
        /// <param name="operation">The operation to perform i.e. Disable or Enable</param>
        public void EnableDisable_Ethernet(string operation)
        {
        	SelectQuery wmiQuery = new SelectQuery("SELECT * FROM Win32_NetworkAdapter WHERE NetConnectionId != NULL");
        	
        	ManagementObjectSearcher search = new ManagementObjectSearcher(wmiQuery);
        	
        	foreach (ManagementObject item in search.Get())
        	{
        		if (((string)item["NetConnectionId"]) == "Ethernet")
        		{
        			item.InvokeMethod(operation, null);
        			break;
        		}
        	}
        	
        	Report.Info("Ethernet has been " + operation + "d.");
        }
        
        /// <summary>
        /// This method will either enable or disable the WiFi adapter depending on the operation passed through
        /// </summary>
        /// <param name="operation">The operation to perform i.e. Disable or Enable</param>
        public void EnableDisable_WiFi(string operation)
        {
        	SelectQuery wmiQuery = new SelectQuery("SELECT * FROM Win32_NetworkAdapter WHERE NetConnectionId != NULL");
        	
        	ManagementObjectSearcher search = new ManagementObjectSearcher(wmiQuery);
        	
        	foreach (ManagementObject item in search.Get())
        	{
        		if (((string)item["NetConnectionId"]) == "Wi-Fi")
        		{
        			item.InvokeMethod(operation, null);
        			break;
        		}
        	}
        	
        	Report.Info("Wi-Fi has been " + operation + "d.");
        }

        public bool IsAdminMode()
        {
            // TODO: Replace the following line with your code implementation.
            throw new NotImplementedException();
        }
    }
}
