///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace CSP.ParticipantsPage
{
    public partial class Validate_Enroll_Status
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Validate_EnrollStatusDropdown(string EnrollStatus)
        {
        	String[] enrollOptions = new String[]{"In Progress",
        	                              "Randomized",
        	                              "Withdrew after ICF signing",
        	                              "Unable to contact after 3",
        	                              "Unable to participate",
        	                              "Not interested in study",
        	                              "No show for appointment",
        	                              "Not eligible",
        	                              "Screen fail medical history",
        	                              "Screen fail medical condition",
        	                              "Screen fail other",
        	                              "Screen fail medical lab results",
        	                              "Qualified sent to site",
        	                              "Qualified not sent to site",
        	                              "Not Qualified",
        	                              "Abandoned"};
        	
        	int enrollIndex = -1;
        	
        	for (int i = 0; i < enrollOptions.Length; i++)
        	{
        		if (enrollOptions[i].Equals(EnrollStatus))
        		{
        			enrollIndex = i;
        			break;
        		}
        	}
        	
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (TagValue=$EnrollStatus) on item 'CogstateSolutionPlatform.ParticipantsPage.EnrollStatusDropdown'.", repo.CogstateSolutionPlatform.ParticipantsPage.EnrollStatusDropdownInfo);
        	Validate.AttributeEqual(repo.CogstateSolutionPlatform.ParticipantsPage.EnrollStatusDropdownInfo,
        	                        "TagValue", enrollIndex.ToString());

        }

    }
}
