///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using System.Data;
using System.Data.SqlClient;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace CSP.DatabaseModules
{
    public partial class Validate_16Tier_Threshold
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        public static DataTable dt = new DataTable();
		
        /// <summary>
        /// 
        /// </summary>
        /// <param name="DBServer"></param>
        /// <param name="Database"></param>
        /// <param name="dbUsername"></param>
        /// <param name="dbPassword"></param>
        /// <param name="TestIdentifier"></param>
        /// <param name="Authentication"></param>
        /// <param name="ExpectedTier"></param>
        public void Get_Tier_Scores(string DBServer, string Database, string dbUsername, string dbPassword, string TestIdentifier, string Authentication)
        {	
        	//Clear anything which is in the current datatable
        	dt.Reset();
        	
        	//Get Composite Scores from db based on current TestIdentifier
        	string query = @"SELECT [PsyAttStdScr] ,[LearnWMStdScr]
  							FROM [Reports].[vwExtractStandardAssessmentDetail]
 	 						WHERE [TestIdentifier] = @TestIdentifier";
        	
        	//Build sql connection
        	string sqlConnString = string.Format("Server={0};Database={1};User Id={2};Password={3};Authentication={4};Connection Timeout={5};", DBServer, Database, dbUsername, dbPassword, Authentication, "30");
        	SqlDataAdapter da = new SqlDataAdapter(query, sqlConnString);
        	da.SelectCommand.Parameters.AddWithValue("@TestIdentifier", TestIdentifier);
        	
        	//Run query and store results
        	using (da)
        		da.Fill(dt);
        	
        	//Get the Composite Scores and store for comparison
        	PsyAttStdScr = dt.Rows[0]["PsyAttStdScr"].ToString();
        	LearnWMStdScr = dt.Rows[0]["LearnWMStdScr"].ToString();        	

        }

        public void Compare_Tier_Scores(string ExpectedTier)
        {
        	bool pass = false;
        	
        	Report.Log(ReportLevel.Info, "LearnWM: " + LearnWMStdScr);
        	Report.Log(ReportLevel.Info, "PsyStd: " + PsyAttStdScr);

			double LearnWM = 0;
			double PsyAtt = 0;			
        	
        	//Convert scores from string format to double if the score is not NULL
        	if (LearnWMStdScr != "") {
        		LearnWM = double.Parse(LearnWMStdScr);
        	}
        	
        	if (PsyAttStdScr != "") {
        		PsyAtt = double.Parse(PsyAttStdScr);
        	}
        	
        	//Depending on the expected tier, compare the PsyAtt and LearnWMM Std Scores in the Database with the expected scores
        	//which need to be obtained in order to place in each of the tiers (using default 16 tier criteria)
            switch (ExpectedTier) {
        			
            	case "Tier 1":
        			
        			if (LearnWM < 80 && PsyAtt < 80)
        				pass = true;       						
            		
            		break;
            		
            	case "Tier 2":
            		
            		if (LearnWM < 80 && PsyAtt >= 80 && PsyAtt < 90)
        				pass = true;
            		
            		break;
            		
            	case "Tier 3":
            		
            		if (LearnWM < 80 && PsyAtt >= 90)
        				pass = true;
            		
            		break;
            		
            	case "Tier 4":
            		
            		if (LearnWM < 80 && PsyAttStdScr == "")
        				pass = true;
            		
            		break;
            		
            	case "Tier 5":
            		
            		if (LearnWM >= 80 && LearnWM < 90 && PsyAtt < 80)
        				pass = true;
            		
            		break;
            		
            	case "Tier 6":
            		
            		if (LearnWM >= 80 && LearnWM < 90 && PsyAtt >= 80 && PsyAtt < 90)
        				pass = true;
            		
            		break;
            		
            	case "Tier 7":
            		
            		if (LearnWM >= 80 && LearnWM < 90 && PsyAtt >= 90)
        				pass = true;
            		
            		break;
            		
            	case "Tier 8":
            		
            		if (LearnWM >= 80 && LearnWM < 90 && PsyAttStdScr == "")
        				pass = true;
            		
            		break;
            		
            		
            	case "Tier 9":
            		
            		if (LearnWM>= 90 && PsyAtt < 80)
        				pass = true;
            		
            		break;
            		
            	case "Tier 10":
            		
            		if (LearnWM >= 90 && PsyAtt >= 80 && PsyAtt < 90)
        				pass = true;
            		
            		break;
            		
            	case "Tier 11":
            		
            		if (LearnWM >= 90 && PsyAtt >= 90)
        				pass = true;
            		
            		break;
            		
            	case "Tier 12":
            		
            		if (LearnWM >= 90 && PsyAttStdScr == "")
        				pass = true;
            		
            		break;
            		
            	case "Tier 13":
            		
            		if (LearnWMStdScr == "" && PsyAtt < 80)
        				pass = true;
            		
            		break;
            		
            	case "Tier 14":
            		
            		if (LearnWMStdScr == "" && PsyAtt >= 80 && PsyAtt < 90)
        				pass = true;
            		
            		break;
            		
            	case "Tier 15":
            		
            		if (LearnWMStdScr == "" && PsyAtt >= 90)
        				pass = true;
            		
            		break;
            		
            	case "Tier 16":
            		
            		if (LearnWMStdScr == "" && PsyAttStdScr == "")
        				pass = true;
            		
            		break;
            		
            	default:
            		
            		pass = false;
            		
            		break;
            				
            }
        	
        	//Print result to report
        	if (pass) {
        		Report.Success("Validation", "Scores for " + ExpectedTier + " are within the expected threshold");
        		Report.Success("Validation", "PsyAttStdScr: " + PsyAttStdScr);
        		Report.Success("Validation", "LearnWMStdScr: " + LearnWMStdScr);
        	}
        	else {
        		Report.Failure("Validation", "Scores for " + ExpectedTier + " are outside the expected threshold");
        		Report.Failure("Validation", "PsyAttStdScr: " + PsyAttStdScr);
        		Report.Failure("Validation", "LearnWMStdScr: " + LearnWMStdScr);
        	}
        		
        	
        }

    }
}
