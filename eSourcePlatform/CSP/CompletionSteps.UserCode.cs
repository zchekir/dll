///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Newtonsoft.Json.Linq;

namespace CSP
{
  public class setkWorkflowJSONRequest
	{
		public string id { get; set; }
	
		
		
	/// Object for creating a new workflow request
		public setkWorkflowJSONRequest()
		{
			
		
		}
		
	}





	public partial class CompletionSteps
    {
        
        private void Init()
        {
            
        }

        public void Stepcompletion(string Token, string BlockID, string WorkflowID, string JSONData, string CSPDOM)
        {
           
        	
        	 //variable
		    string url = "https://" + CSPDOM +"/api/workflows/"+WorkflowID +"/workflowBlocks/"+ BlockID;
		     
			//Setup API call
			HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(url);
			httpRequest.ContentType = "application/json";
			httpRequest.Method = "PUT";
			httpRequest.Headers.Add("Authorization", Token);
			
			
			// sending the data in the body and replacing the studyid, studyname and version
			using (StreamWriter sw = new StreamWriter(httpRequest.GetRequestStream()))
			{
		 	
		   
		    // creating block ID 
		    int x = Int32.Parse(BlockID);
		    int idTest= x+2;
		    string blockID =idTest.ToString();
		    
			Report.Log(ReportLevel.Info, "BatteryID " + batteryID );
		    
             //  var testData = JSONData.Replace(@"<wfid>", WorkflowID).Replace(@"<blockid>", BlockID).Replace(@"<id2>", blockID).Replace(@"<batteryid>", batteryID).Replace(@"<TabConfigID>", TabConfigID).Replace(@"<DeskTopID>", DeskTopID).Replace(@"<studyName>", studyName);
			var testData = JSONData.Replace(@"<wfid>", WorkflowID).Replace(@"<blockid>", BlockID).Replace(@"<studid>", studid).Replace(@"<id2>", blockID).Replace(@"<batteryid>", batteryID).Replace(@"<TabConfigID>", TabConfigID).Replace(@"<DeskTopID>", DeskTopID).Replace(@"<studyName>", studyName);

             Report.Info("Data to send: " + testData);
				
				sw.Write(testData);
				sw.Flush();
				sw.Close();
			}
			
			
			//Get response and store in new object
			HttpWebResponse httpResponse = (HttpWebResponse)httpRequest.GetResponse();
			
			setkWorkflowJSONRequest responseObject = new setkWorkflowJSONRequest();
			
			using (StreamReader sr = new StreamReader(httpResponse.GetResponseStream()))
			{
				string response = sr.ReadToEnd();
				responseObject = new JavaScriptSerializer().Deserialize<setkWorkflowJSONRequest>(response);
				
				NextBlockid = responseObject.id;
			
			Report.Log(ReportLevel.Info, "id " + NextBlockid );
				
			 }
        	
        }

    }
}
