///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using WinForms = System.Windows.Forms;
using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace CSP
{
    public partial class OutComesValidation
    {
        //variables:
    	public static DataTable dt = new DataTable();
    	string C_PrimaryOutcome; 
    	string C_StandardScoreZ; 
    	string C_StandardScoreT;
    	
        private void Init()
        {
            
        }

        public void Outcome_Validation(string dbserver, string database, string username, string password, string authentication, string TestIdentifier, string PrimaryOutcome, string StandardScoreZ, string StandardScoreT)
        {
        	
        	//Validating the CSP DB Version :
			
			dt.Reset();
			
			
			// QueryDB
			         string query = @"select *
                                     from reports.vwExtractStandardAssessmentDetail  
                                     where TestIdentifier=@TestIdentifier";
			         
			         do {
			         	
			     Report.Info( " Validating  Processor Results in DB..........  ");
				//Connecting to SQL DB:
				string sqlConnString = string.Format("Server={0};Database={1};User Id={2};Password={3};Authentication={4};Connection Timeout={5};", dbserver, database, username, password, authentication, "30");
				//CreateObject:
				SqlDataAdapter da = new SqlDataAdapter(query, sqlConnString);
				da.SelectCommand.Parameters.AddWithValue("@TestIdentifier", TestIdentifier);
				
				// Get the data from DB
				
				
					
				      using (da)
				      da.Fill(dt);
			         	
			         } while ( dt.Rows.Count < 1);
			         	
			     
				
				  try{
				  string r = dt.Rows.Count.ToString();
				  
				  //PrimaryOutcome Validation
				  
                 for ( int i = 0; i < dt.Rows.Count; i ++ )
                  {
                    C_PrimaryOutcome = dt.Rows[i]["PrimaryOutcome"].ToString();
                    Report.Log(ReportLevel.Info, "PrimaryOutcome:"+"  "+ C_PrimaryOutcome);
                   
                     
                     
                  }
                 	         
			     Report.Info( " PrimaryOutcome..........  ");
                 Validate.AreEqual(C_PrimaryOutcome,PrimaryOutcome);
                 
                  //StandardScoreZ Validation 
                  
                 for ( int i = 0; i < dt.Rows.Count; i ++ )
                  {
                   
                     C_StandardScoreZ = dt.Rows[i]["StandardScoreZ"].ToString();
                     Report.Log(ReportLevel.Info, "StandardScoreZ:"+"  "+  C_StandardScoreZ);
                     
                   
                     
                  }
                 Report.Info( " StandardScoreZ..........  "); 
                 Validate.AreEqual(C_StandardScoreZ,StandardScoreZ);
                 
                 //StandardScoreT Validation 
				   
                 for ( int i = 0; i < dt.Rows.Count; i ++ )
                  {
                     
                     C_StandardScoreT = dt.Rows[i]["StandardScoreT"].ToString();
                     Report.Log(ReportLevel.Info, "StandardScoreT:"+"  "+  C_StandardScoreT);
                     
                     
                  }
                 Report.Info( " StandardScoreT..........  "); 
				 Validate.AreEqual(C_StandardScoreT,StandardScoreT);
				 
				}catch (Exception e){
					
				    Report.Log(ReportLevel.Info,  "Error: " + e.Message );	
				}
            
        }

    }
}
