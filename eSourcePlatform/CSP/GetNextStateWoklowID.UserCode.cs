///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////


using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;
using Newtonsoft.Json.Linq;

namespace CSP
{
	public class NextStatekWorkflowJSONRequest
	{
		public string id { get; set; }
	
		public string workflowId { get; set; }
		
	/// Object for creating a new workflow request
		public NextStatekWorkflowJSONRequest()
		{
			
		
		}
		
	}
	
    public partial class GetNextStateWoklowID
    {
       
        private void Init()
        {
            
        }

        public void NextStateWorkflowID(string Token, string StudyID, string WorkflowID, string BatteryID, string JSONDATA, string CSPDOM)
        {
            
        	
        	
        	 //variable
		    string url = "https://" + CSPDOM + "/api/workflows/"+WorkflowID;
			//Setup API call
			HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create(url);
			httpRequest.ContentType = "application/json";
			httpRequest.Method = "GET";
			httpRequest.Headers.Add("Authorization", Token);
			
			
			
			/*
			// sending the data in the body and replacing the studyid, studyname and version
			using (StreamWriter sw = new StreamWriter(httpRequest.GetRequestStream()))
			{
		 	
		    
               var testData = JSONDATA; //.Replace(@"<stuid>", StudyID).Replace(@"<wfid>", WorkflowID).Replace(@"<batteryid>", BatteryID);
				Report.Info("zak DATA : " + " " + testData);
				
				sw.Write(testData);
				sw.Flush();
				sw.Close();
			}
           */
			
			//Get response and store in new object
			HttpWebResponse httpResponse = (HttpWebResponse)httpRequest.GetResponse();
			
			NextStatekWorkflowJSONRequest responseObject = new NextStatekWorkflowJSONRequest();
			
			using (StreamReader sr = new StreamReader(httpResponse.GetResponseStream()))
			{
				string response = sr.ReadToEnd();
				responseObject = new JavaScriptSerializer().Deserialize<NextStatekWorkflowJSONRequest>(response);
				
				
				// slpit
			char[] mych = { '&', ',','?','=' };
            string data = response;
            string[] nextStateID = data.Split(mych);
            
           
				
				
				NextStateWorflowID =nextStateID[7] ;
			
				
			
				
				Report.Log(ReportLevel.Info, "Next stateID" +NextStateWorflowID);
			 }
			
			
			
        	
        	
        	
        	
        	
        	
        	
        	
        	
        	
        }

    }
}
