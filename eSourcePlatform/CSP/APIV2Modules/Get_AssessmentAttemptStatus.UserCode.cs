///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using System.Web.Script.Serialization;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace CSP.APIV2Modules
{
	/// Response object for the test qualification status
	/// </summary>
	   public class assessmentAttemptStatusJSONResponse
	   {
		/// <summary>
		/// Returned qualificaiton status
		/// </summary>
		public string assessmentAttemptStatus { get; set; }
		
		public assessmentAttemptStatusJSONResponse()
		{
			
		}
	}
    public partial class Get_AssessmentAttemptStatus
    {
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        public void Assessment_Attempt_Status(string studyProtocolName, string DOM, string TestIdentifier, string AuthToken)
        {
        	
        	Report.Log(ReportLevel.Info, "assessmentAttemptStatus: " + TestIdentifier);
          //Setup API call
        	HttpWebRequest httpRequest = (HttpWebRequest)WebRequest.Create("https://" + DOM + "/api/external/V2/" + studyProtocolName  + "/assessmentattempt/" + TestIdentifier + "/status");
        	httpRequest.ContentType = "application/json";
        	httpRequest.Method = "GET";
        	httpRequest.Headers.Add("Authorization", AuthToken);
        	
        	HttpWebResponse httpResponse = (HttpWebResponse)httpRequest.GetResponse();
        	assessmentAttemptStatusJSONResponse responseObject = new assessmentAttemptStatusJSONResponse();
        	
        	using (StreamReader sr = new StreamReader(httpResponse.GetResponseStream()))
        	{
        		string response = sr.ReadToEnd();
        		responseObject = new JavaScriptSerializer().Deserialize<assessmentAttemptStatusJSONResponse>(response);
        		
        		string assessmentAttempt_Status = responseObject.assessmentAttemptStatus;
        		
        		Report.Log(ReportLevel.Info, "assessmentAttemptStatus: " + assessmentAttempt_Status);
        		
        		string expectedStuts= "Complete"; 
        		
        		Validate.AreEqual( expectedStuts ,  assessmentAttempt_Status);
        	}
        }

    }
}
