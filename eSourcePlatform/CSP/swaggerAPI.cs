///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace CSP
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The swaggerAPI recording.
    /// </summary>
    [TestModule("13e4a129-f95e-4991-9c6b-4c0f0ad3992f", ModuleType.Recording, 1)]
    public partial class swaggerAPI : ITestModule
    {
        /// <summary>
        /// Holds an instance of the CSPRepository repository.
        /// </summary>
        public static CSPRepository repo = CSPRepository.Instance;

        static swaggerAPI instance = new swaggerAPI();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public swaggerAPI()
        {
            DOM = "https://cgst-qc-bear.azurewebsites.net/swagger/";
            _Embedded_API = "Cogstate Embedded API";
            keysecret_ = "{{\"key\": \"2ce1bc13-5d4d-4007-b57e-bb1dd32abba5\",\"secret\": \"657f31f0-5c9f-4047-931c-30390cab531a\"}";
            StudyProtocolName = "Janpan ";
            HTTPCODE = "200";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static swaggerAPI Instance
        {
            get { return instance; }
        }

#region Variables

        string _DOM;

        /// <summary>
        /// Gets or sets the value of variable DOM.
        /// </summary>
        [TestVariable("b747c2e7-5e8c-4e07-8215-4c43de5b2b34")]
        public string DOM
        {
            get { return _DOM; }
            set { _DOM = value; }
        }

        string __Embedded_API;

        /// <summary>
        /// Gets or sets the value of variable _Embedded_API.
        /// </summary>
        [TestVariable("e9941ed7-50d9-430d-a7ca-38670154acae")]
        public string _Embedded_API
        {
            get { return __Embedded_API; }
            set { __Embedded_API = value; }
        }

        string _keysecret_;

        /// <summary>
        /// Gets or sets the value of variable keysecret_.
        /// </summary>
        [TestVariable("1767b877-b494-4ef0-8164-5116c1f14fb3")]
        public string keysecret_
        {
            get { return _keysecret_; }
            set { _keysecret_ = value; }
        }

        string _StudyProtocolName;

        /// <summary>
        /// Gets or sets the value of variable StudyProtocolName.
        /// </summary>
        [TestVariable("29cad965-c985-441e-bb71-b0c920bdf737")]
        public string StudyProtocolName
        {
            get { return _StudyProtocolName; }
            set { _StudyProtocolName = value; }
        }

        string _HTTPCODE;

        /// <summary>
        /// Gets or sets the value of variable HTTPCODE.
        /// </summary>
        [TestVariable("2c5d0111-1dd2-4d44-a0eb-51fb6b39e9b8")]
        public string HTTPCODE
        {
            get { return _HTTPCODE; }
            set { _HTTPCODE = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Website", "Opening web site URL in variable $DOM with browser 'Chrome' in normal mode.", new RecordItemIndex(0));
            Host.Current.OpenBrowser(DOM, "Chrome", "", false, false, false, false, false, true);
            Delay.Milliseconds(0);
            
            Report.Screenshot(ReportLevel.Info, "User", "", repo.SwaggerUI.Self, false, new RecordItemIndex(1));
            
            //Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$_Embedded_API) on item 'SwaggerUI.CogstateEmbeddedAPI'.", repo.SwaggerUI.CogstateEmbeddedAPIInfo, new RecordItemIndex(2));
            //Validate.AttributeEqual(repo.SwaggerUI.CogstateEmbeddedAPIInfo, "InnerText", _Embedded_API);
            //Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SwaggerUI.ClickTryItOut' at Center.", repo.SwaggerUI.ClickTryItOutInfo, new RecordItemIndex(3));
            repo.SwaggerUI.ClickTryItOut.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$StudyProtocolName' with focus on 'SwaggerUI.StudyProtocolName'.", repo.SwaggerUI.StudyProtocolNameInfo, new RecordItemIndex(4));
            repo.SwaggerUI.StudyProtocolName.PressKeys(StudyProtocolName);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key 'Ctrl+A' Press with focus on 'SwaggerUI.KeySecret'.", repo.SwaggerUI.KeySecretInfo, new RecordItemIndex(5));
            Keyboard.PrepareFocus(repo.SwaggerUI.KeySecret);
            Keyboard.Press(System.Windows.Forms.Keys.A | System.Windows.Forms.Keys.Control, Keyboard.DefaultScanCode, Keyboard.DefaultKeyPressTime, 1, true);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{ENTER}' with focus on 'SwaggerUI.KeySecret'.", repo.SwaggerUI.KeySecretInfo, new RecordItemIndex(6));
            repo.SwaggerUI.KeySecret.PressKeys("{ENTER}");
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence from variable '$keysecret_' with focus on 'SwaggerUI.EnterCredentials'.", repo.SwaggerUI.EnterCredentialsInfo, new RecordItemIndex(7));
            repo.SwaggerUI.EnterCredentials.PressKeys(keysecret_);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'SwaggerUI.ClickExecute' at Center.", repo.SwaggerUI.ClickExecuteInfo, new RecordItemIndex(8));
            repo.SwaggerUI.ClickExecute.Click();
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating AttributeEqual (InnerText=$HTTPCODE) on item 'SwaggerUI.N200Codevalidation'.", repo.SwaggerUI.N200CodevalidationInfo, new RecordItemIndex(9));
            Validate.AttributeEqual(repo.SwaggerUI.N200CodevalidationInfo, "InnerText", HTTPCODE);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Application", "Closing application containing item 'SwaggerUI'.", repo.SwaggerUI.SelfInfo, new RecordItemIndex(10));
            Host.Current.CloseApplication(repo.SwaggerUI.Self, new Duration(0));
            Delay.Milliseconds(0);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
