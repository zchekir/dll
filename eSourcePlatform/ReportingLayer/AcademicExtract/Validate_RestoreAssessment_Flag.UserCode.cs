///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ReportingLayer.AcademicExtract
{
    public partial class Validate_RestoreAssessment_Flag
    {
    	public static DataTable dt = new DataTable();
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        /// <summary>
        /// Queries the Academic Extract view for the ExcludeAssessment flag and stores in the DataTable
        /// </summary> 
        public void GetFlag(string database, string dbserver, string username, string password, string authentication)
        {
			dt.Reset();
        	
        	//Setup SQL Query
        	string query = @"SELECT ExcludeAssessment FROM dbo.vwAcademicExtract
        					WHERE TestIdentifier = @TestIdentifier";
        	
        	//Setup Connection String
        	string sqlConnString = string.Format("Server={0};Database={1};User Id={2};Password={3};Authentication={4};Connection Timeout={5};", dbserver, database, username, password, authentication, "30");
        	
        	//Setup sql Client
        	SqlDataAdapter da = new SqlDataAdapter(query, sqlConnString);
        	da.SelectCommand.Parameters.AddWithValue("@TestIdentifier", TestIdentifier);
        	
        	//Get query results
        	using (da)
        	{
        		da.Fill(dt);
        	}
        }
        
        /// <summary>
        /// Prints the contents of the DataTable to the Report and confirms the Academic Extract view shows
        /// the Test has been restored
        /// </summary>
        public void ReportFlag()
        {
        	
        	//Check first row in the Academic Extract. If false ('0') is returned, this indicated the assesment has been restored
        	if ((bool)dt.Rows[0]["ExcludeAssessment"])
        		Report.Failure("Assessment has been marked as excluded in the Academic Extract View");
        	else
            	Report.Success("Assessment has been restored in the Academic Extract View");
        	          
        }

    }
}
