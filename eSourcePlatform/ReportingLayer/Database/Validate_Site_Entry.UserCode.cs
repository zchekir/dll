///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ReportingLayer.Database
{
    public partial class Validate_Site_Entry
    {
    	
    	public static DataTable dt = new DataTable();
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }

        /// <summary>
        /// Queries the Reporting database for a StudySite and stores the resulting records in a Datatable
        /// </summary>
        public void GetSite(string dbserver, string database, string username, string password, string authentication)
        {
        	dt.Reset();
        	
        	//Setup SQL Query
        	string query = @"SELECT * FROM Study.Site
        					WHERE ProtocolName = @StudyName";
        	
        	//Setup ConnectionString
        	string sqlConnString = string.Format("Server={0};Database={1};User Id={2};Password={3};Authentication={4};Connection Timeout={5};", dbserver, database, username, password, authentication, "30");
        	
        	//Setup SQL Client
        	SqlDataAdapter da = new SqlDataAdapter(query, sqlConnString);
        	da.SelectCommand.Parameters.AddWithValue("@StudyName", StudyName + RandNum);
        	
        	//Get query Results
        	using (da)
        	{
        		da.Fill(dt);
        	}
        }

        /// <summary>
        /// Prints the contents of the DataTable to the Report and confirms the study site has been added to the Reporting Database correctly
        /// </summary>
        public void ReportRecord()
        {
            //Print the Column Name and Value for each Column returned by the query
            foreach (DataRow row in dt.Rows)
            {
            	for (int i = 0; i < dt.Columns.Count; i++)
            	{
            		Report.Log(ReportLevel.Info, dt.Columns[i].ColumnName + ": " + row[i].ToString());
            	}
            }
            
            //Compare the ProtocolName and SiteId and confirm it is saved correctly
            if (dt.Rows[0]["ProtocolName"].ToString() == StudyName + RandNum &&
                dt.Rows[0]["SiteId"].ToString() == RandNum)
            {
            	Report.Success("Site has been added to the Reporting Database successfully");
            }
            else
            {
            	Report.Failure("Site not found/added to the Reporting Database");
            }
        }

    }
}
