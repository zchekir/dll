///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ReportingLayer.Database
{
    public partial class Validate_AssessmentTest_Entry
    {
    	public static DataTable dt = new DataTable();
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        /// <summary>
        /// Queries the Reporting database for an AssessmentTest and stores the resulting records in a Datatable
        /// </summary>
        public void GetAssessmentTest(string dbserver, string database, string username, string password, string authentication)
        {
        	dt.Reset();
        	
        	//Setup SQL Query
        	string query = @"SELECT * FROM extracts.AssessmentTest
        					WHERE TestID = @TestIdentifier";
        	
        	//Setup ConnectionString
        	string sqlConnString = string.Format("Server={0};Database={1};User Id={2};Password={3};Authentication={4};Connection Timeout={5};", dbserver, database, username, password, authentication, "30");
        	
        	//Setup SQL Client
        	SqlDataAdapter da = new SqlDataAdapter(query, sqlConnString);
        	da.SelectCommand.Parameters.AddWithValue("@TestIdentifier", TestIdentifier);
        	
        	//Get query results
        	using (da)
        	{
        		da.Fill(dt);
        	}
        }

        /// <summary>
        /// Prints the contents of the DataTable to the Report and confirms the AssessmentTest has been added to the Reporting Database correctly
        /// </summary>            
        public void ReportRecord()
        {
        	//Print the Column Name and Value for each Column returned by the query        	
        	foreach (DataRow row in dt.Rows)
        	{
        		for (int i = 0; i < dt.Columns.Count; i++) 
        		{
             		Report.Log(ReportLevel.Info, dt.Columns[i].ColumnName + ": " + row[i].ToString());       			
        		}
        	}
        	
        	//Compare the ProtocolName and TestID and confirm all expected rows are saved correctly
        	foreach (DataRow row in dt.Rows)
        	{
        		if (row["TestID"].ToString() == TestIdentifier &&
        			row["ProtocolName"].ToString() == StudyName + RandNum)
        		{
        			Report.Success("AssessmentTest has been added to the Reporting Database successfully");
				}
				else
				{
					Report.Failure("AssessmentTest has not been added/does not appear in the Reporting Database");
				}
        	}     
        }

    }
}
