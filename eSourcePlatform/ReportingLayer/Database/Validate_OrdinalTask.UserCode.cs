///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// Your custom recording code should go in this file.
// The designer will only add methods to this file, so your custom code won't be overwritten.
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Repository;
using Ranorex.Core.Testing;

namespace ReportingLayer.Database
{
    public partial class Validate_OrdinalTask
    {
    	public static DataTable dt = new DataTable();
        /// <summary>
        /// This method gets called right after the recording has been started.
        /// It can be used to execute recording specific initialization code.
        /// </summary>
        private void Init()
        {
            // Your recording specific initialization code goes here.
        }
        
        /// <summary>
        /// Queries the Reporting database for an Assessment and stores the resulting OrdinalTaskData in a Datatable
        /// </summary>
        public void GetOrdinalTask(string database, string dbserver, string username, string password, string authentication)
        {
        	dt.Reset();
        	
        	//Setup SQL Query
        	string query = @"SELECT OrdinalTaskData, Test FROM extracts.vwAcademicExtract
        					WHERE TestIdentifier = @TestIdentifier
							ORDER BY DefaultSortOrder ASC";
        	
        	//Setup ConnectionString
        	string sqlConnString = string.Format("Server={0};Database={1};User Id={2};Password={3};Authentication={4};Connection Timeout={5};", dbserver, database, username, password, authentication, "30");
        	
        	//Setup sql client
        	SqlDataAdapter da = new SqlDataAdapter(query, sqlConnString);
        	da.SelectCommand.Parameters.AddWithValue("@TestIdentifier", TestIdentifier);
        	
        	//Get query results
        	using (da)
        	{
        		da.Fill(dt);
        	}
        }
        
        /// <summary>
        /// Prints the contents of the DataTable to the Report and confirms the OrdinalTaskData have been added to the Reporting Database correctly
        /// </summary>  
        public void ReportRecords()
        {
			bool flag = true;
			string previousTask = dt.Rows[0]["Test"].ToString(); //Sets the previousTask to the first test in the AcademicExtract
        	int taskCount = 1;
        	
            //Print the Column Name and Value for each Column returned by the query        	
            foreach (DataRow row in dt.Rows)
            {
            	
            	for (int i = 0; i < dt.Columns.Count; i++)
            	{
            		Report.Log(ReportLevel.Info, dt.Columns[i].ColumnName + ": " + row[i].ToString());            		
            	}
            	
            	//Compare the current Task (Test Column in datatable) with the previous task. If they no longer match, increment the expected
				//OrdinalTaskData counter by 1            	
            	if (row["Test"].ToString() != previousTask) {
            		taskCount++;
            	}
				
				//Check if the current OrdinalTaskData record matches the expected count
				if (row["OrdinalTaskData"].ToString() != taskCount.ToString()) {
					flag = false;
				}
				
				//Set previousTask to the current record, ready to compare the next row
				previousTask = row["Test"].ToString();
            }
            

            if (flag)
            	Report.Success("OrdinalTaskData have been added to the Reporting Database successfully");
            else
            	Report.Failure("OrdinalTaskData have not been added to the Reporting Database correctly");            	
        }

    }
}
